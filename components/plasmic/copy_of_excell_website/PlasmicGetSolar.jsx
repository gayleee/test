/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: dFCW3EJJak7e5FJ1Eb9ZNV
// Component: -vUKywbRqfpw
import * as React from "react";
import Head from "next/head";
import Link from "next/link";
import { useRouter } from "next/router";
import {
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  Stack as Stack__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  hasVariant,
  initializeCodeComponentStates,
  set as $stateSet,
  useCurrentUser,
  useDollarState
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv
} from "@plasmicapp/react-web/lib/host";
import * as plasmicAuth from "@plasmicapp/react-web/lib/auth";
import { usePlasmicDataSourceContext } from "@plasmicapp/data-sources-context";
import {
  executePlasmicDataOp,
  usePlasmicInvalidate
} from "@plasmicapp/react-web/lib/data-sources";
import { NavigationBar } from "@plasmicpkgs/plasmic-nav";
import { FormWrapper } from "@plasmicpkgs/antd5/skinny/Form";
import { formHelpers as FormWrapper_Helpers } from "@plasmicpkgs/antd5/skinny/Form";
import { FormItemWrapper } from "@plasmicpkgs/antd5/skinny/FormItem";
import { AntdInput } from "@plasmicpkgs/antd5/skinny/registerInput";
import { inputHelpers as AntdInput_Helpers } from "@plasmicpkgs/antd5/skinny/registerInput";
import { DataFetcher } from "@plasmicpkgs/plasmic-query";
import { AntdSelect } from "@plasmicpkgs/antd5/skinny/registerSelect";
import { AntdOption } from "@plasmicpkgs/antd5/skinny/registerSelect";
import { AntdTextArea } from "@plasmicpkgs/antd5/skinny/registerInput";
import { inputHelpers as AntdTextArea_Helpers } from "@plasmicpkgs/antd5/skinny/registerInput";
import { AntdButton } from "@plasmicpkgs/antd5/skinny/registerButton";
import { useScreenVariants as useScreenVariants_3Kid9VNeHn18 } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: 3kid9VNeHn18/globalVariant
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: dFCW3EJJak7e5FJ1Eb9ZNV/projectcss
import sty from "./PlasmicGetSolar.module.css"; // plasmic-import: -vUKywbRqfpw/css
import GeoAltFill1SvgIcon from "./icons/PlasmicIcon__GeoAltFill1Svg"; // plasmic-import: YEWPN-2nVWdu/icon
import EnvelopeFill1SvgIcon from "./icons/PlasmicIcon__EnvelopeFill1Svg"; // plasmic-import: yiqTHAMM2X5j/icon
import Linkedin2SvgIcon from "./icons/PlasmicIcon__Linkedin2Svg"; // plasmic-import: 6HNgcahnQu82/icon
import Facebook2SvgIcon from "./icons/PlasmicIcon__Facebook2Svg"; // plasmic-import: IENMmqVlMhTI/icon
import ArrowUpRightCircleFill2SvgIcon from "./icons/PlasmicIcon__ArrowUpRightCircleFill2Svg"; // plasmic-import: pCYqUEbGa2Pj/icon

createPlasmicElementProxy;

export const PlasmicGetSolar__VariantProps = new Array();

export const PlasmicGetSolar__ArgProps = new Array();

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicGetSolar__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );
  const $props = {
    ...args,
    ...variants
  };
  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const currentUser = useCurrentUser?.() || {};
  const stateSpecs = React.useMemo(
    () => [
      {
        path: "variable",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "inquiryForm.value",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,
        refName: "inquiryForm",
        onMutate: generateOnMutateForSpec("value", FormWrapper_Helpers)
      },
      {
        path: "inquiryForm.isSubmitting",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false,
        refName: "inquiryForm",
        onMutate: generateOnMutateForSpec("isSubmitting", FormWrapper_Helpers)
      },
      {
        path: "firstNameInput.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,
        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "lastNameInput.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,
        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "emailInput.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,
        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "phoneInput.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,
        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "regionDropdown.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "companyNameInput.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,
        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "select.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "select2.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "messageInput.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,
        onMutate: generateOnMutateForSpec("value", AntdTextArea_Helpers)
      },
      {
        path: "billAmountInput.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,
        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "submitSuccess",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      }
    ],

    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });
  const dataSourcesCtx = usePlasmicDataSourceContext();
  const plasmicInvalidate = usePlasmicInvalidate();
  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariants_3Kid9VNeHn18()
  });
  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"getSolarPage"}
          data-plasmic-override={overrides.getSolarPage}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            sty.getSolarPage
          )}
          id={``}
        >
          <div
            data-plasmic-name={"landingPage"}
            data-plasmic-override={overrides.landingPage}
            className={classNames(projectcss.all, sty.landingPage)}
          >
            <div
              data-plasmic-name={"container2"}
              data-plasmic-override={overrides.container2}
              className={classNames(projectcss.all, sty.container2)}
            >
              <div
                data-plasmic-name={"heading"}
                data-plasmic-override={overrides.heading}
                className={classNames(projectcss.all, sty.heading)}
              >
                <div className={classNames(projectcss.all, sty.column__i7Mxy)}>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__r3GVq)}
                  >
                    <PlasmicImg__
                      alt={""}
                      className={classNames(sty.img__ts52)}
                      displayHeight={
                        hasVariant(globalVariants, "screen", "mobileOnly")
                          ? "223px"
                          : "317px"
                      }
                      displayMaxHeight={"none"}
                      displayMaxWidth={"100%"}
                      displayMinHeight={"0"}
                      displayMinWidth={"0"}
                      displayWidth={"16px"}
                      loading={"lazy"}
                    />

                    <h1
                      data-plasmic-name={"h1"}
                      data-plasmic-override={overrides.h1}
                      className={classNames(
                        projectcss.all,
                        projectcss.h1,
                        projectcss.__wab_text,
                        sty.h1
                      )}
                    >
                      {hasVariant(globalVariants, "screen", "mobileOnly") ? (
                        <React.Fragment>
                          <React.Fragment>{"Got Questions?\n"}</React.Fragment>
                          <span
                            className={
                              "plasmic_default__all plasmic_default__span"
                            }
                            style={{ fontWeight: 700 }}
                          >
                            {"Reach us Today"}
                          </span>
                        </React.Fragment>
                      ) : (
                        <React.Fragment>
                          <React.Fragment>{"Got Questions?\n"}</React.Fragment>
                          <span
                            className={
                              "plasmic_default__all plasmic_default__span"
                            }
                            style={{ fontWeight: 700 }}
                          >
                            {"Reach us Today"}
                          </span>
                        </React.Fragment>
                      )}
                    </h1>
                  </div>
                </div>
              </div>
            </div>
            <NavigationBar
              data-plasmic-name={"navigationBar"}
              data-plasmic-override={overrides.navigationBar}
              brand={
                <PlasmicLink__
                  data-plasmic-name={"logo3"}
                  data-plasmic-override={overrides.logo3}
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    sty.logo3
                  )}
                  component={Link}
                  href={"#"}
                  platform={"nextjs"}
                >
                  <PlasmicImg__
                    alt={""}
                    className={classNames(sty.img__uGuka)}
                    displayHeight={"40px"}
                    displayMaxHeight={"none"}
                    displayMaxWidth={"298px"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={"100%"}
                    src={{
                      src: "/plasmic/copy_of_excell_website/images/layer2.svg",
                      fullWidth: 220.00169372558594,
                      fullHeight: 80.00094604492188,
                      aspectRatio: 2.75
                    }}
                  />
                </PlasmicLink__>
              }
              className={classNames("__wab_instance", sty.navigationBar)}
              closeButton={
                <PlasmicImg__
                  alt={""}
                  className={classNames(sty.img__fQaQm)}
                  displayHeight={"auto"}
                  displayMaxHeight={"none"}
                  displayMaxWidth={"none"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={"32px"}
                  src={{
                    src: "/plasmic/copy_of_excell_website/images/xLgSvg2.svg",
                    fullWidth: 24,
                    fullHeight: 25,
                    aspectRatio: 0.96
                  }}
                />
              }
              forceOpenMenu={
                hasVariant(globalVariants, "screen", "mobileOnly")
                  ? true
                  : false
              }
              itemsGap={
                hasVariant(globalVariants, "screen", "mobileOnly") ? 48 : 48
              }
              menuItems={
                <React.Fragment>
                  <PlasmicLink__
                    className={classNames(
                      projectcss.all,
                      projectcss.a,
                      projectcss.__wab_text,
                      sty.link__tgh7B
                    )}
                    component={Link}
                    href={`/`}
                    platform={"nextjs"}
                  >
                    {"Home"}
                  </PlasmicLink__>
                  <PlasmicLink__
                    data-plasmic-name={"solution3"}
                    data-plasmic-override={overrides.solution3}
                    className={classNames(
                      projectcss.all,
                      projectcss.a,
                      projectcss.__wab_text,
                      sty.solution3
                    )}
                    component={Link}
                    href={`/solutions`}
                    platform={"nextjs"}
                  >
                    {"Solution"}
                  </PlasmicLink__>
                  <PlasmicLink__
                    className={classNames(
                      projectcss.all,
                      projectcss.a,
                      projectcss.__wab_text,
                      sty.link__cfBBn
                    )}
                    component={Link}
                    href={`/projects`}
                    platform={"nextjs"}
                  >
                    {"Projects"}
                  </PlasmicLink__>
                  <PlasmicLink__
                    data-plasmic-name={"logo4"}
                    data-plasmic-override={overrides.logo4}
                    className={classNames(
                      projectcss.all,
                      projectcss.a,
                      sty.logo4
                    )}
                    component={Link}
                    href={`/`}
                    platform={"nextjs"}
                  >
                    <PlasmicImg__
                      alt={""}
                      className={classNames(sty.img__lQww5)}
                      displayHeight={"64px"}
                      displayMaxHeight={"none"}
                      displayMaxWidth={"298px"}
                      displayMinHeight={"0"}
                      displayMinWidth={"0"}
                      displayWidth={"100%"}
                      src={{
                        src: "/plasmic/copy_of_excell_website/images/excellVerticalLogoPng.png",
                        fullWidth: 987,
                        fullHeight: 1002,
                        aspectRatio: undefined
                      }}
                    />
                  </PlasmicLink__>
                  <PlasmicLink__
                    className={classNames(
                      projectcss.all,
                      projectcss.a,
                      projectcss.__wab_text,
                      sty.link__j3EK
                    )}
                    component={Link}
                    href={`/about`}
                    platform={"nextjs"}
                  >
                    {"About"}
                  </PlasmicLink__>
                  <PlasmicLink__
                    className={classNames(
                      projectcss.all,
                      projectcss.a,
                      projectcss.__wab_text,
                      sty.link__emm4Q
                    )}
                    component={Link}
                    href={`/learn`}
                    platform={"nextjs"}
                  >
                    {"Learn"}
                  </PlasmicLink__>
                  <PlasmicLink__
                    className={classNames(
                      projectcss.all,
                      projectcss.a,
                      projectcss.__wab_text,
                      sty.link___5Sjj8
                    )}
                    component={Link}
                    href={`/contact`}
                    platform={"nextjs"}
                  >
                    {"Contact Us"}
                  </PlasmicLink__>
                </React.Fragment>
              }
              openButton={
                <PlasmicImg__
                  alt={""}
                  className={classNames(sty.img___94HqJ)}
                  displayHeight={"auto"}
                  displayMaxHeight={"none"}
                  displayMaxWidth={"none"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={"32px"}
                  src={
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? {
                          src: "/plasmic/copy_of_excell_website/images/hamburgerMenuSvg.svg",
                          fullWidth: 24,
                          fullHeight: 25,
                          aspectRatio: 0.96
                        }
                      : undefined
                  }
                  width={"32"}
                />
              }
              responsiveBreakpoint={768}
            />
          </div>
          <Stack__
            as={"div"}
            data-plasmic-name={"container"}
            data-plasmic-override={overrides.container}
            hasGap={true}
            className={classNames(projectcss.all, sty.container)}
            id={"reach-out-section"}
          >
            <Stack__
              as={"div"}
              data-plasmic-name={"card"}
              data-plasmic-override={overrides.card}
              hasGap={true}
              className={classNames(projectcss.all, sty.card)}
            >
              {(() => {
                const child$Props = {
                  className: classNames("__wab_instance", sty.inquiryForm),
                  extendedOnValuesChange: async (...eventArgs) => {
                    generateStateOnChangePropForCodeComponents(
                      $state,
                      "value",
                      ["inquiryForm", "value"],
                      FormWrapper_Helpers
                    ).apply(null, eventArgs);
                    (async (changedValues, allValues) => {
                      const $steps = {};
                      $steps["updateVariable"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["variable"]
                              },
                              operation: 0
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;
                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateVariable"] != null &&
                        typeof $steps["updateVariable"] === "object" &&
                        typeof $steps["updateVariable"].then === "function"
                      ) {
                        $steps["updateVariable"] = await $steps[
                          "updateVariable"
                        ];
                      }
                    }).apply(null, eventArgs);
                  },
                  formItems: [
                    { label: "Name", name: "name", inputType: "Text" },
                    {
                      label: "Message",
                      name: "message",
                      inputType: "Text Area"
                    }
                  ],

                  labelCol: { span: 8, horizontalOnly: true },
                  layout: "vertical",
                  mode: "advanced",
                  onFinish: async values => {
                    const $steps = {};
                    $steps["postgresCreate"] = true
                      ? (() => {
                          const actionArgs = {
                            continueOnError: true,
                            dataOp: {
                              sourceId: "cBFJte1xahZF9tr69kaEnM",
                              opId: "a93462cb-b2e8-4114-8494-8dae73ae87a4",
                              userArgs: {
                                variables: [values]
                              },
                              cacheKey: null,
                              invalidatedKeys: ["plasmic_refresh_all"],
                              roleId: "7a6870b2-63d4-446f-86b5-f6db971e2494"
                            }
                          };
                          return (async ({ dataOp, continueOnError }) => {
                            try {
                              const response = await executePlasmicDataOp(
                                dataOp,
                                {
                                  userAuthToken: dataSourcesCtx?.userAuthToken,
                                  user: dataSourcesCtx?.user
                                }
                              );
                              await plasmicInvalidate(dataOp.invalidatedKeys);
                              return response;
                            } catch (e) {
                              if (!continueOnError) {
                                throw e;
                              }
                              return e;
                            }
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["postgresCreate"] != null &&
                      typeof $steps["postgresCreate"] === "object" &&
                      typeof $steps["postgresCreate"].then === "function"
                    ) {
                      $steps["postgresCreate"] = await $steps["postgresCreate"];
                    }
                  },
                  onIsSubmittingChange: async (...eventArgs) => {
                    generateStateOnChangePropForCodeComponents(
                      $state,
                      "isSubmitting",
                      ["inquiryForm", "isSubmitting"],
                      FormWrapper_Helpers
                    ).apply(null, eventArgs);
                  },
                  ref: ref => {
                    $refs["inquiryForm"] = ref;
                  },
                  requiredMark: "optional",
                  submitSlot: null,
                  wrapperCol: { span: 16, horizontalOnly: true }
                };
                initializeCodeComponentStates(
                  $state,
                  [
                    {
                      name: "value",
                      plasmicStateName: "inquiryForm.value"
                    },
                    {
                      name: "isSubmitting",
                      plasmicStateName: "inquiryForm.isSubmitting"
                    }
                  ],

                  [],
                  FormWrapper_Helpers ?? {},
                  child$Props
                );
                return (
                  <FormWrapper
                    data-plasmic-name={"inquiryForm"}
                    data-plasmic-override={overrides.inquiryForm}
                    {...child$Props}
                  >
                    <Stack__
                      as={"div"}
                      data-plasmic-name={"nameHs"}
                      data-plasmic-override={overrides.nameHs}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.nameHs)}
                    >
                      <FormItemWrapper
                        data-plasmic-name={"firstNameField"}
                        data-plasmic-override={overrides.firstNameField}
                        className={classNames(
                          "__wab_instance",
                          sty.firstNameField
                        )}
                        label={"First Name"}
                        name={"first_name"}
                      >
                        {(() => {
                          const child$Props = {
                            className: classNames(
                              "__wab_instance",
                              sty.firstNameInput
                            ),
                            maxLength: 255,
                            onChange: async (...eventArgs) => {
                              generateStateOnChangePropForCodeComponents(
                                $state,
                                "value",
                                ["firstNameInput", "value"],
                                AntdInput_Helpers
                              ).apply(null, eventArgs);
                            },
                            placeholder: "Enter First Name",
                            value: generateStateValueProp($state, [
                              "firstNameInput",
                              "value"
                            ])
                          };
                          initializeCodeComponentStates(
                            $state,
                            [
                              {
                                name: "value",
                                plasmicStateName: "firstNameInput.value"
                              }
                            ],

                            [],
                            AntdInput_Helpers ?? {},
                            child$Props
                          );
                          return (
                            <AntdInput
                              data-plasmic-name={"firstNameInput"}
                              data-plasmic-override={overrides.firstNameInput}
                              {...child$Props}
                            />
                          );
                        })()}
                      </FormItemWrapper>
                      <FormItemWrapper
                        data-plasmic-name={"lastNameField"}
                        data-plasmic-override={overrides.lastNameField}
                        className={classNames(
                          "__wab_instance",
                          sty.lastNameField
                        )}
                        label={"Last Name"}
                        name={"last_name"}
                      >
                        {(() => {
                          const child$Props = {
                            className: classNames(
                              "__wab_instance",
                              sty.lastNameInput
                            ),
                            onChange: async (...eventArgs) => {
                              generateStateOnChangePropForCodeComponents(
                                $state,
                                "value",
                                ["lastNameInput", "value"],
                                AntdInput_Helpers
                              ).apply(null, eventArgs);
                            },
                            placeholder: "Enter Last Name",
                            value: generateStateValueProp($state, [
                              "lastNameInput",
                              "value"
                            ])
                          };
                          initializeCodeComponentStates(
                            $state,
                            [
                              {
                                name: "value",
                                plasmicStateName: "lastNameInput.value"
                              }
                            ],

                            [],
                            AntdInput_Helpers ?? {},
                            child$Props
                          );
                          return (
                            <AntdInput
                              data-plasmic-name={"lastNameInput"}
                              data-plasmic-override={overrides.lastNameInput}
                              {...child$Props}
                            />
                          );
                        })()}
                      </FormItemWrapper>
                    </Stack__>
                    <Stack__
                      as={"div"}
                      data-plasmic-name={"contactHs"}
                      data-plasmic-override={overrides.contactHs}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.contactHs)}
                    >
                      <FormItemWrapper
                        data-plasmic-name={"emailField"}
                        data-plasmic-override={overrides.emailField}
                        className={classNames("__wab_instance", sty.emailField)}
                        label={
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__xCzzo
                            )}
                          >
                            {"Email Address"}
                          </div>
                        }
                        name={"email"}
                        rules={[
                          {
                            ruleType: "required",
                            message: "Email address must be provided."
                          }
                        ]}
                      >
                        {(() => {
                          const child$Props = {
                            className: classNames(
                              "__wab_instance",
                              sty.emailInput
                            ),
                            onChange: async (...eventArgs) => {
                              generateStateOnChangePropForCodeComponents(
                                $state,
                                "value",
                                ["emailInput", "value"],
                                AntdInput_Helpers
                              ).apply(null, eventArgs);
                            },
                            placeholder: "Enter Email Address",
                            type: "email",
                            value: generateStateValueProp($state, [
                              "emailInput",
                              "value"
                            ])
                          };
                          initializeCodeComponentStates(
                            $state,
                            [
                              {
                                name: "value",
                                plasmicStateName: "emailInput.value"
                              }
                            ],

                            [],
                            AntdInput_Helpers ?? {},
                            child$Props
                          );
                          return (
                            <AntdInput
                              data-plasmic-name={"emailInput"}
                              data-plasmic-override={overrides.emailInput}
                              {...child$Props}
                            />
                          );
                        })()}
                      </FormItemWrapper>
                      <FormItemWrapper
                        data-plasmic-name={"phoneField"}
                        data-plasmic-override={overrides.phoneField}
                        className={classNames("__wab_instance", sty.phoneField)}
                        initialValue={"+63"}
                        label={"Phone Number"}
                        name={"phone_number"}
                        rules={[
                          { ruleType: "max", length: 13 },
                          { ruleType: "whitespace", message: `` },
                          {
                            ruleType: "required",
                            message:
                              "Phone or Landline number must be provided."
                          }
                        ]}
                      >
                        {(() => {
                          const child$Props = {
                            className: classNames(
                              "__wab_instance",
                              sty.phoneInput
                            ),
                            maxLength: 13,
                            onChange: async (...eventArgs) => {
                              generateStateOnChangePropForCodeComponents(
                                $state,
                                "value",
                                ["phoneInput", "value"],
                                AntdInput_Helpers
                              ).apply(null, eventArgs);
                            },
                            placeholder: ``,
                            type: "tel",
                            value: generateStateValueProp($state, [
                              "phoneInput",
                              "value"
                            ])
                          };
                          initializeCodeComponentStates(
                            $state,
                            [
                              {
                                name: "value",
                                plasmicStateName: "phoneInput.value"
                              }
                            ],

                            [],
                            AntdInput_Helpers ?? {},
                            child$Props
                          );
                          return (
                            <AntdInput
                              data-plasmic-name={"phoneInput"}
                              data-plasmic-override={overrides.phoneInput}
                              {...child$Props}
                            />
                          );
                        })()}
                      </FormItemWrapper>
                    </Stack__>
                    <Stack__
                      as={"div"}
                      data-plasmic-name={"addressHs"}
                      data-plasmic-override={overrides.addressHs}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.addressHs)}
                    >
                      <DataFetcher
                        data-plasmic-name={"regionFetcher"}
                        data-plasmic-override={overrides.regionFetcher}
                        className={classNames(
                          "__wab_instance",
                          sty.regionFetcher
                        )}
                        dataName={"fetchedData"}
                        errorDisplay={
                          <DataCtxReader__>
                            {$ctx => "Error fetching data"}
                          </DataCtxReader__>
                        }
                        errorName={"fetchError"}
                        loadingDisplay={
                          <DataCtxReader__>
                            {$ctx => "Loading..."}
                          </DataCtxReader__>
                        }
                        method={"GET"}
                        noLayout={false}
                        url={"https://psgc.gitlab.io/api/regions/"}
                      >
                        <DataCtxReader__>
                          {$ctx => (
                            <FormItemWrapper
                              data-plasmic-name={"regionField"}
                              data-plasmic-override={overrides.regionField}
                              className={classNames(
                                "__wab_instance",
                                sty.regionField
                              )}
                              label={
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text___0FxEv
                                  )}
                                >
                                  {"Region"}
                                </div>
                              }
                              name={"region"}
                              rules={[{ ruleType: "required" }]}
                            >
                              <AntdSelect
                                data-plasmic-name={"regionDropdown"}
                                data-plasmic-override={overrides.regionDropdown}
                                className={classNames(
                                  "__wab_instance",
                                  sty.regionDropdown
                                )}
                                defaultOpen={false}
                                defaultStylesClassName={classNames(
                                  projectcss.root_reset,
                                  projectcss.plasmic_default_styles,
                                  projectcss.plasmic_mixins,
                                  projectcss.plasmic_tokens,
                                  plasmic_antd_5_hostless_css.plasmic_tokens
                                )}
                                onChange={async (...eventArgs) => {
                                  generateStateOnChangeProp($state, [
                                    "regionDropdown",
                                    "value"
                                  ]).apply(null, eventArgs);
                                }}
                                options={[
                                  {
                                    value: "option1",
                                    label: "Option 1",
                                    type: "option"
                                  }
                                ]}
                                placeholder={"Select..."}
                                popupScopeClassName={
                                  sty["regionDropdown__popup"]
                                }
                                useChildren={(() => {
                                  try {
                                    return $ctx.fetchedData;
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return true;
                                    }
                                    throw e;
                                  }
                                })()}
                                value={generateStateValueProp($state, [
                                  "regionDropdown",
                                  "value"
                                ])}
                              >
                                {(_par =>
                                  !_par
                                    ? []
                                    : Array.isArray(_par)
                                    ? _par
                                    : [_par])(
                                  (() => {
                                    try {
                                      return $ctx.fetchedData;
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return [];
                                      }
                                      throw e;
                                    }
                                  })()
                                ).map((__plasmic_item_0, __plasmic_idx_0) => {
                                  const currentItem = __plasmic_item_0;
                                  const currentIndex = __plasmic_idx_0;
                                  return (
                                    <AntdOption
                                      data-plasmic-name={"regionOptions"}
                                      data-plasmic-override={
                                        overrides.regionOptions
                                      }
                                      className={classNames(
                                        "__wab_instance",
                                        sty.regionOptions
                                      )}
                                      key={currentIndex}
                                      value={(() => {
                                        try {
                                          return `${currentItem.name} (${currentItem.regionName})`;
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return undefined;
                                          }
                                          throw e;
                                        }
                                      })()}
                                    >
                                      <React.Fragment>
                                        {(() => {
                                          try {
                                            return `${currentItem.name} (${currentItem.regionName})`;
                                          } catch (e) {
                                            if (
                                              e instanceof TypeError ||
                                              e?.plasmicType ===
                                                "PlasmicUndefinedDataError"
                                            ) {
                                              return "Option";
                                            }
                                            throw e;
                                          }
                                        })()}
                                      </React.Fragment>
                                    </AntdOption>
                                  );
                                })}
                              </AntdSelect>
                            </FormItemWrapper>
                          )}
                        </DataCtxReader__>
                      </DataFetcher>
                      <FormItemWrapper
                        data-plasmic-name={"companyNameField"}
                        data-plasmic-override={overrides.companyNameField}
                        className={classNames(
                          "__wab_instance",
                          sty.companyNameField
                        )}
                        label={
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__dgsuu
                            )}
                          >
                            {"Company Name"}
                          </div>
                        }
                        name={"company_name"}
                        rules={[
                          {
                            ruleType: "required",
                            message: "Company name cannot be empty."
                          }
                        ]}
                      >
                        {(() => {
                          const child$Props = {
                            className: classNames(
                              "__wab_instance",
                              sty.companyNameInput
                            ),
                            onChange: async (...eventArgs) => {
                              generateStateOnChangePropForCodeComponents(
                                $state,
                                "value",
                                ["companyNameInput", "value"],
                                AntdInput_Helpers
                              ).apply(null, eventArgs);
                            },
                            placeholder: "Enter Company Name",
                            value: generateStateValueProp($state, [
                              "companyNameInput",
                              "value"
                            ])
                          };
                          initializeCodeComponentStates(
                            $state,
                            [
                              {
                                name: "value",
                                plasmicStateName: "companyNameInput.value"
                              }
                            ],

                            [],
                            AntdInput_Helpers ?? {},
                            child$Props
                          );
                          return (
                            <AntdInput
                              data-plasmic-name={"companyNameInput"}
                              data-plasmic-override={overrides.companyNameInput}
                              {...child$Props}
                            />
                          );
                        })()}
                      </FormItemWrapper>
                    </Stack__>
                    <Stack__
                      as={"div"}
                      data-plasmic-name={"businessHs"}
                      data-plasmic-override={overrides.businessHs}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.businessHs)}
                    >
                      <FormItemWrapper
                        data-plasmic-name={"sectorField"}
                        data-plasmic-override={overrides.sectorField}
                        className={classNames(
                          "__wab_instance",
                          sty.sectorField
                        )}
                        label={
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__nEBrm
                            )}
                          >
                            {"Sector/Classification"}
                          </div>
                        }
                        name={"sector"}
                        rules={[
                          {
                            ruleType: "required",
                            message: "Please select a sector."
                          }
                        ]}
                      >
                        <AntdSelect
                          data-plasmic-name={"select"}
                          data-plasmic-override={overrides.select}
                          className={classNames("__wab_instance", sty.select)}
                          defaultStylesClassName={classNames(
                            projectcss.root_reset,
                            projectcss.plasmic_default_styles,
                            projectcss.plasmic_mixins,
                            projectcss.plasmic_tokens,
                            plasmic_antd_5_hostless_css.plasmic_tokens
                          )}
                          onChange={async (...eventArgs) => {
                            generateStateOnChangeProp($state, [
                              "select",
                              "value"
                            ]).apply(null, eventArgs);
                          }}
                          options={(() => {
                            const __composite = [
                              { value: null, label: null, type: "option" },
                              { value: null, label: null, type: "option" },
                              { type: "option", value: null, label: null }
                            ];

                            __composite["0"]["value"] = "Residential";
                            __composite["0"]["label"] = "Residential";
                            __composite["1"]["value"] = "Industrial";
                            __composite["1"]["label"] = "Industrial";
                            __composite["2"]["value"] = "Commercial";
                            __composite["2"]["label"] = "Commercial";
                            return __composite;
                          })()}
                          placeholder={"Select..."}
                          popupScopeClassName={sty["select__popup"]}
                          value={generateStateValueProp($state, [
                            "select",
                            "value"
                          ])}
                        />
                      </FormItemWrapper>
                      <FormItemWrapper
                        data-plasmic-name={"formField"}
                        data-plasmic-override={overrides.formField}
                        className={classNames("__wab_instance", sty.formField)}
                        label={
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__bqBhQ
                            )}
                          >
                            {"Industry"}
                          </div>
                        }
                        name={"industry"}
                        rules={[
                          {
                            ruleType: "required",
                            message: "Please select an industry."
                          }
                        ]}
                      >
                        <AntdSelect
                          data-plasmic-name={"select2"}
                          data-plasmic-override={overrides.select2}
                          className={classNames("__wab_instance", sty.select2)}
                          defaultStylesClassName={classNames(
                            projectcss.root_reset,
                            projectcss.plasmic_default_styles,
                            projectcss.plasmic_mixins,
                            projectcss.plasmic_tokens,
                            plasmic_antd_5_hostless_css.plasmic_tokens
                          )}
                          onChange={async (...eventArgs) => {
                            generateStateOnChangeProp($state, [
                              "select2",
                              "value"
                            ]).apply(null, eventArgs);
                          }}
                          options={(() => {
                            const __composite = [
                              { type: "option", value: null, label: null },
                              { value: null, label: null, type: "option" },
                              { value: null, label: null, type: "option" },
                              { type: "option", value: null, label: null },
                              { type: "option", value: null, label: null },
                              { type: "option", value: null, label: null },
                              { type: "option", value: null, label: null },
                              { type: "option", value: null, label: null },
                              { type: "option", value: null, label: null },
                              { type: "option", value: null, label: null },
                              { type: "option", value: null, label: null },
                              { type: "option", value: null, label: null },
                              { type: "option", value: null, label: null },
                              { type: "option", value: null, label: null }
                            ];

                            __composite["0"]["value"] = "(Residential)";
                            __composite["0"]["label"] = "Select if Residential";
                            __composite["1"]["value"] =
                              "Agriculture, Hunting, or Forestry";
                            __composite["1"]["label"] =
                              "Agriculture, Hunting, or Forestry";
                            __composite["2"]["value"] = "Construction";
                            __composite["2"]["label"] = "Construction";
                            __composite["3"]["value"] = "Finance";
                            __composite["3"]["label"] = "Finance";
                            __composite["4"]["value"] = "Fishing";
                            __composite["4"]["label"] = "Fishing";
                            __composite["5"]["value"] = "Health & Social Work";
                            __composite["5"]["label"] = "Health & Social Work";
                            __composite["6"]["value"] = "Mining & Quarrying";
                            __composite["6"]["label"] = "Mining & Quarrying";
                            __composite["7"]["value"] = "Manufacturing";
                            __composite["7"]["label"] = "Manufacturing";
                            __composite["8"]["value"] = "Private Education";
                            __composite["8"]["label"] = "Private Education";
                            __composite["9"]["value"] =
                              "Real Estate, Renting, & Business Service";
                            __composite["9"]["label"] =
                              "Real Estate, Renting, & Business Service";
                            __composite["10"]["value"] =
                              "Transport, Storage, & Communication";
                            __composite["10"]["label"] =
                              "Transport, Storage, & Communication";
                            __composite["11"]["value"] = "Utilities";
                            __composite["11"]["label"] = "Utilities";
                            __composite["12"]["value"] =
                              "Wholesale & Retail Trade";
                            __composite["12"]["label"] =
                              "Wholesale & Retail Trade";
                            __composite["13"]["value"] = "Others";
                            __composite["13"]["label"] = "Others";
                            return __composite;
                          })()}
                          placeholder={"Select..."}
                          popupScopeClassName={sty["select2__popup"]}
                          value={generateStateValueProp($state, [
                            "select2",
                            "value"
                          ])}
                        />
                      </FormItemWrapper>
                    </Stack__>
                    <Stack__
                      as={"div"}
                      data-plasmic-name={"detailsHs"}
                      data-plasmic-override={overrides.detailsHs}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.detailsHs)}
                    >
                      <FormItemWrapper
                        data-plasmic-name={"billAmountField"}
                        data-plasmic-override={overrides.billAmountField}
                        className={classNames(
                          "__wab_instance",
                          sty.billAmountField
                        )}
                        initialValue={"\u20b10.00"}
                        label={
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__kP9V
                            )}
                          >
                            {"Monthly Bill"}
                          </div>
                        }
                        name={"monthly_bill"}
                      >
                        {(() => {
                          const child$Props = {
                            className: classNames(
                              "__wab_instance",
                              sty.billAmountInput
                            ),
                            onChange: async (...eventArgs) => {
                              generateStateOnChangePropForCodeComponents(
                                $state,
                                "value",
                                ["billAmountInput", "value"],
                                AntdInput_Helpers
                              ).apply(null, eventArgs);
                            },
                            placeholder: "Enter amount",
                            type: "text",
                            value: generateStateValueProp($state, [
                              "billAmountInput",
                              "value"
                            ])
                          };
                          initializeCodeComponentStates(
                            $state,
                            [
                              {
                                name: "value",
                                plasmicStateName: "billAmountInput.value"
                              }
                            ],

                            [],
                            AntdInput_Helpers ?? {},
                            child$Props
                          );
                          return (
                            <AntdInput
                              data-plasmic-name={"billAmountInput"}
                              data-plasmic-override={overrides.billAmountInput}
                              {...child$Props}
                            />
                          );
                        })()}
                      </FormItemWrapper>
                      <FormItemWrapper
                        data-plasmic-name={"messageField"}
                        data-plasmic-override={overrides.messageField}
                        className={classNames(
                          "__wab_instance",
                          sty.messageField
                        )}
                        label={
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__zlLhS
                            )}
                          >
                            {"Message"}
                          </div>
                        }
                        name={"message"}
                        rules={[
                          {
                            ruleType: "required",
                            message:
                              "Message or purpose of the inquiry cannot be empty."
                          }
                        ]}
                      >
                        {(() => {
                          const child$Props = {
                            className: classNames(
                              "__wab_instance",
                              sty.messageInput
                            ),
                            onChange: async (...eventArgs) => {
                              generateStateOnChangePropForCodeComponents(
                                $state,
                                "value",
                                ["messageInput", "value"],
                                AntdTextArea_Helpers
                              ).apply(null, eventArgs);
                            },
                            placeholder: "Enter your question or message here",
                            value: generateStateValueProp($state, [
                              "messageInput",
                              "value"
                            ])
                          };
                          initializeCodeComponentStates(
                            $state,
                            [
                              {
                                name: "value",
                                plasmicStateName: "messageInput.value"
                              }
                            ],

                            [],
                            AntdTextArea_Helpers ?? {},
                            child$Props
                          );
                          return (
                            <AntdTextArea
                              data-plasmic-name={"messageInput"}
                              data-plasmic-override={overrides.messageInput}
                              {...child$Props}
                            />
                          );
                        })()}
                      </FormItemWrapper>
                    </Stack__>
                    <AntdButton
                      data-plasmic-name={"button"}
                      data-plasmic-override={overrides.button}
                      className={classNames("__wab_instance", sty.button)}
                      href={undefined}
                      loading={false}
                      onClick={async () => {
                        const $steps = {};
                        $steps["refreshData"] = true
                          ? (() => {
                              const actionArgs = {
                                queryInvalidation: ["plasmic_refresh_all"]
                              };
                              return (async ({ queryInvalidation }) => {
                                if (!queryInvalidation) {
                                  return;
                                }
                                await plasmicInvalidate(queryInvalidation);
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["refreshData"] != null &&
                          typeof $steps["refreshData"] === "object" &&
                          typeof $steps["refreshData"].then === "function"
                        ) {
                          $steps["refreshData"] = await $steps["refreshData"];
                        }
                      }}
                      size={"large"}
                      submitsForm={true}
                      type={"default"}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__yEfLi
                        )}
                      >
                        {"Submit Form"}
                      </div>
                    </AntdButton>
                  </FormWrapper>
                );
              })()}
            </Stack__>
          </Stack__>
          <footer
            data-plasmic-name={"footer"}
            data-plasmic-override={overrides.footer}
            className={classNames(projectcss.all, sty.footer)}
          >
            <div className={classNames(projectcss.all, sty.freeBox__t3Bi5)}>
              <div
                data-plasmic-name={"section5"}
                data-plasmic-override={overrides.section5}
                className={classNames(projectcss.all, sty.section5)}
              >
                <div
                  data-plasmic-name={"brandLogo3"}
                  data-plasmic-override={overrides.brandLogo3}
                  className={classNames(projectcss.all, sty.brandLogo3)}
                >
                  <PlasmicImg__
                    alt={""}
                    className={classNames(sty.img___0ZTxZ)}
                    displayHeight={"auto"}
                    displayMaxHeight={"none"}
                    displayMaxWidth={
                      hasVariant(globalVariants, "screen", "mobileOnly")
                        ? "100%"
                        : "50%"
                    }
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={"240px"}
                    loading={"lazy"}
                    src={{
                      src: "/plasmic/copy_of_excell_website/images/excellHorizontalLogoPng.png",
                      fullWidth: 2001,
                      fullHeight: 706,
                      aspectRatio: undefined
                    }}
                  />

                  <div
                    data-plasmic-name={"section6"}
                    data-plasmic-override={overrides.section6}
                    className={classNames(projectcss.all, sty.section6)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.column__szjQ3)}
                    >
                      <Stack__
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__mkbp8
                        )}
                      >
                        <h4
                          data-plasmic-name={"h4"}
                          data-plasmic-override={overrides.h4}
                          className={classNames(
                            projectcss.all,
                            projectcss.h4,
                            projectcss.__wab_text,
                            sty.h4
                          )}
                        >
                          {"Better Energy, Better Business."}
                        </h4>
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__j4JYm
                          )}
                        >
                          {
                            "We help businesses thrive by turning unused spaces into energy-saving assets. Our end-to-end solar solutions\u2014from expert energy assessments to premium installations and lifetime support\u2014are built for long-term value, reliability, and sustainability."
                          }
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text___809Zz
                          )}
                        >
                          {
                            "\u00a9 Copyright 2025 Excell Energy and Powergen Inc. All rights reserved."
                          }
                        </div>
                      </Stack__>
                    </div>
                    <div
                      className={classNames(projectcss.all, sty.column__jwwDy)}
                    >
                      <div
                        data-plasmic-name={"whereToFindUs3"}
                        data-plasmic-override={overrides.whereToFindUs3}
                        className={classNames(
                          projectcss.all,
                          sty.whereToFindUs3
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__kwWqZ
                          )}
                        >
                          <h5
                            className={classNames(
                              projectcss.all,
                              projectcss.h5,
                              projectcss.__wab_text,
                              sty.h5__k0UJr
                            )}
                          >
                            {"Where to find us?"}
                          </h5>
                        </div>
                        <Stack__
                          as={"div"}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__c0Omb
                          )}
                        >
                          <GeoAltFill1SvgIcon
                            className={classNames(
                              projectcss.all,
                              sty.svg___4YgOs
                            )}
                            role={"img"}
                          />

                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text___2MKd1
                            )}
                          >
                            {
                              "Unit 2618, 26th flr, High Street South Corporate Plaza Tower 1 26th St, cor 9th Ave, 1634 Taguig, Philippines"
                            }
                          </div>
                        </Stack__>
                      </div>
                      <div
                        data-plasmic-name={"connectWithUs4"}
                        data-plasmic-override={overrides.connectWithUs4}
                        className={classNames(
                          projectcss.all,
                          sty.connectWithUs4
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__smDZn
                          )}
                        >
                          <h5
                            className={classNames(
                              projectcss.all,
                              projectcss.h5,
                              projectcss.__wab_text,
                              sty.h5__tmrLn
                            )}
                          >
                            {"Connect with us!"}
                          </h5>
                        </div>
                        <Stack__
                          as={"div"}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__a4F4J
                          )}
                        >
                          <EnvelopeFill1SvgIcon
                            className={classNames(
                              projectcss.all,
                              sty.svg__ldRm7
                            )}
                            role={"img"}
                          />

                          <PlasmicLink__
                            className={classNames(
                              projectcss.all,
                              projectcss.a,
                              projectcss.__wab_text,
                              sty.link__d2TCp
                            )}
                            component={Link}
                            href={"https://www.plasmic.app/"}
                            platform={"nextjs"}
                          >
                            {"solutions@excell.energy"}
                          </PlasmicLink__>
                        </Stack__>
                        <Stack__
                          as={"div"}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__zrerf
                          )}
                        >
                          <Linkedin2SvgIcon
                            className={classNames(
                              projectcss.all,
                              sty.svg__rkQvk
                            )}
                            role={"img"}
                          />

                          <PlasmicLink__
                            className={classNames(
                              projectcss.all,
                              projectcss.a,
                              projectcss.__wab_text,
                              sty.link___2Vvdo
                            )}
                            component={Link}
                            href={"https://www.plasmic.app/"}
                            platform={"nextjs"}
                          >
                            {"Excell Energy and PowerGen Corp."}
                          </PlasmicLink__>
                        </Stack__>
                        <Stack__
                          as={"div"}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.freeBox___5V7D1
                          )}
                        >
                          <Facebook2SvgIcon
                            className={classNames(
                              projectcss.all,
                              sty.svg__a4Ji5
                            )}
                            role={"img"}
                          />

                          <PlasmicLink__
                            className={classNames(
                              projectcss.all,
                              projectcss.a,
                              projectcss.__wab_text,
                              sty.link___8J86K
                            )}
                            component={Link}
                            href={"https://www.plasmic.app/"}
                            platform={"nextjs"}
                          >
                            {"Excell Energy and PowerGen Corp."}
                          </PlasmicLink__>
                        </Stack__>
                      </div>
                      <div
                        data-plasmic-name={"getSolar3"}
                        data-plasmic-override={overrides.getSolar3}
                        className={classNames(projectcss.all, sty.getSolar3)}
                      >
                        <Stack__
                          as={"div"}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__ztOiy
                          )}
                        >
                          <Stack__
                            as={PlasmicLink__}
                            hasGap={true}
                            className={classNames(
                              projectcss.all,
                              projectcss.a,
                              sty.link__ghICh
                            )}
                            component={Link}
                            href={`/get-solar`}
                            platform={"nextjs"}
                          >
                            <h5
                              className={classNames(
                                projectcss.all,
                                projectcss.h5,
                                projectcss.__wab_text,
                                sty.h5__c2FeC
                              )}
                            >
                              {"Get Solar"}
                            </h5>
                            <ArrowUpRightCircleFill2SvgIcon
                              className={classNames(
                                projectcss.all,
                                sty.svg__p6Ddg
                              )}
                              role={"img"}
                            />
                          </Stack__>
                        </Stack__>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </footer>
        </div>
      </div>
    </React.Fragment>
  );
}

const PlasmicDescendants = {
  getSolarPage: [
    "getSolarPage",
    "landingPage",
    "container2",
    "heading",
    "h1",
    "navigationBar",
    "logo3",
    "solution3",
    "logo4",
    "container",
    "card",
    "inquiryForm",
    "nameHs",
    "firstNameField",
    "firstNameInput",
    "lastNameField",
    "lastNameInput",
    "contactHs",
    "emailField",
    "emailInput",
    "phoneField",
    "phoneInput",
    "addressHs",
    "regionFetcher",
    "regionField",
    "regionDropdown",
    "regionOptions",
    "companyNameField",
    "companyNameInput",
    "businessHs",
    "sectorField",
    "select",
    "formField",
    "select2",
    "detailsHs",
    "billAmountField",
    "billAmountInput",
    "messageField",
    "messageInput",
    "button",
    "footer",
    "section5",
    "brandLogo3",
    "section6",
    "h4",
    "whereToFindUs3",
    "connectWithUs4",
    "getSolar3"
  ],

  landingPage: [
    "landingPage",
    "container2",
    "heading",
    "h1",
    "navigationBar",
    "logo3",
    "solution3",
    "logo4"
  ],

  container2: ["container2", "heading", "h1"],
  heading: ["heading", "h1"],
  h1: ["h1"],
  navigationBar: ["navigationBar", "logo3", "solution3", "logo4"],
  logo3: ["logo3"],
  solution3: ["solution3"],
  logo4: ["logo4"],
  container: [
    "container",
    "card",
    "inquiryForm",
    "nameHs",
    "firstNameField",
    "firstNameInput",
    "lastNameField",
    "lastNameInput",
    "contactHs",
    "emailField",
    "emailInput",
    "phoneField",
    "phoneInput",
    "addressHs",
    "regionFetcher",
    "regionField",
    "regionDropdown",
    "regionOptions",
    "companyNameField",
    "companyNameInput",
    "businessHs",
    "sectorField",
    "select",
    "formField",
    "select2",
    "detailsHs",
    "billAmountField",
    "billAmountInput",
    "messageField",
    "messageInput",
    "button"
  ],

  card: [
    "card",
    "inquiryForm",
    "nameHs",
    "firstNameField",
    "firstNameInput",
    "lastNameField",
    "lastNameInput",
    "contactHs",
    "emailField",
    "emailInput",
    "phoneField",
    "phoneInput",
    "addressHs",
    "regionFetcher",
    "regionField",
    "regionDropdown",
    "regionOptions",
    "companyNameField",
    "companyNameInput",
    "businessHs",
    "sectorField",
    "select",
    "formField",
    "select2",
    "detailsHs",
    "billAmountField",
    "billAmountInput",
    "messageField",
    "messageInput",
    "button"
  ],

  inquiryForm: [
    "inquiryForm",
    "nameHs",
    "firstNameField",
    "firstNameInput",
    "lastNameField",
    "lastNameInput",
    "contactHs",
    "emailField",
    "emailInput",
    "phoneField",
    "phoneInput",
    "addressHs",
    "regionFetcher",
    "regionField",
    "regionDropdown",
    "regionOptions",
    "companyNameField",
    "companyNameInput",
    "businessHs",
    "sectorField",
    "select",
    "formField",
    "select2",
    "detailsHs",
    "billAmountField",
    "billAmountInput",
    "messageField",
    "messageInput",
    "button"
  ],

  nameHs: [
    "nameHs",
    "firstNameField",
    "firstNameInput",
    "lastNameField",
    "lastNameInput"
  ],

  firstNameField: ["firstNameField", "firstNameInput"],
  firstNameInput: ["firstNameInput"],
  lastNameField: ["lastNameField", "lastNameInput"],
  lastNameInput: ["lastNameInput"],
  contactHs: [
    "contactHs",
    "emailField",
    "emailInput",
    "phoneField",
    "phoneInput"
  ],

  emailField: ["emailField", "emailInput"],
  emailInput: ["emailInput"],
  phoneField: ["phoneField", "phoneInput"],
  phoneInput: ["phoneInput"],
  addressHs: [
    "addressHs",
    "regionFetcher",
    "regionField",
    "regionDropdown",
    "regionOptions",
    "companyNameField",
    "companyNameInput"
  ],

  regionFetcher: [
    "regionFetcher",
    "regionField",
    "regionDropdown",
    "regionOptions"
  ],

  regionField: ["regionField", "regionDropdown", "regionOptions"],
  regionDropdown: ["regionDropdown", "regionOptions"],
  regionOptions: ["regionOptions"],
  companyNameField: ["companyNameField", "companyNameInput"],
  companyNameInput: ["companyNameInput"],
  businessHs: ["businessHs", "sectorField", "select", "formField", "select2"],
  sectorField: ["sectorField", "select"],
  select: ["select"],
  formField: ["formField", "select2"],
  select2: ["select2"],
  detailsHs: [
    "detailsHs",
    "billAmountField",
    "billAmountInput",
    "messageField",
    "messageInput"
  ],

  billAmountField: ["billAmountField", "billAmountInput"],
  billAmountInput: ["billAmountInput"],
  messageField: ["messageField", "messageInput"],
  messageInput: ["messageInput"],
  button: ["button"],
  footer: [
    "footer",
    "section5",
    "brandLogo3",
    "section6",
    "h4",
    "whereToFindUs3",
    "connectWithUs4",
    "getSolar3"
  ],

  section5: [
    "section5",
    "brandLogo3",
    "section6",
    "h4",
    "whereToFindUs3",
    "connectWithUs4",
    "getSolar3"
  ],

  brandLogo3: [
    "brandLogo3",
    "section6",
    "h4",
    "whereToFindUs3",
    "connectWithUs4",
    "getSolar3"
  ],

  section6: ["section6", "h4", "whereToFindUs3", "connectWithUs4", "getSolar3"],
  h4: ["h4"],
  whereToFindUs3: ["whereToFindUs3"],
  connectWithUs4: ["connectWithUs4"],
  getSolar3: ["getSolar3"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicGetSolar__ArgProps,
          internalVariantPropNames: PlasmicGetSolar__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicGetSolar__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "getSolarPage") {
    func.displayName = "PlasmicGetSolar";
  } else {
    func.displayName = `PlasmicGetSolar.${nodeName}`;
  }
  return func;
}

function withUsePlasmicAuth(WrappedComponent) {
  const WithUsePlasmicAuthComponent = props => {
    const dataSourceCtx = usePlasmicDataSourceContext() ?? {};
    const { isUserLoading, user, token } = plasmicAuth.usePlasmicAuth({
      appId: "dFCW3EJJak7e5FJ1Eb9ZNV"
    });
    return (
      <PlasmicDataSourceContextProvider__
        value={{
          ...dataSourceCtx,
          isUserLoading,
          userAuthToken: token,
          user
        }}
      >
        <WrappedComponent {...props} />
      </PlasmicDataSourceContextProvider__>
    );
  };
  return WithUsePlasmicAuthComponent;
}

export const PlasmicGetSolar = Object.assign(
  // Top-level PlasmicGetSolar renders the root element
  withUsePlasmicAuth(makeNodeComponent("getSolarPage")),
  {
    // Helper components rendering sub-elements
    landingPage: makeNodeComponent("landingPage"),
    container2: makeNodeComponent("container2"),
    heading: makeNodeComponent("heading"),
    h1: makeNodeComponent("h1"),
    navigationBar: makeNodeComponent("navigationBar"),
    logo3: makeNodeComponent("logo3"),
    solution3: makeNodeComponent("solution3"),
    logo4: makeNodeComponent("logo4"),
    container: makeNodeComponent("container"),
    card: makeNodeComponent("card"),
    inquiryForm: makeNodeComponent("inquiryForm"),
    nameHs: makeNodeComponent("nameHs"),
    firstNameField: makeNodeComponent("firstNameField"),
    firstNameInput: makeNodeComponent("firstNameInput"),
    lastNameField: makeNodeComponent("lastNameField"),
    lastNameInput: makeNodeComponent("lastNameInput"),
    contactHs: makeNodeComponent("contactHs"),
    emailField: makeNodeComponent("emailField"),
    emailInput: makeNodeComponent("emailInput"),
    phoneField: makeNodeComponent("phoneField"),
    phoneInput: makeNodeComponent("phoneInput"),
    addressHs: makeNodeComponent("addressHs"),
    regionFetcher: makeNodeComponent("regionFetcher"),
    regionField: makeNodeComponent("regionField"),
    regionDropdown: makeNodeComponent("regionDropdown"),
    regionOptions: makeNodeComponent("regionOptions"),
    companyNameField: makeNodeComponent("companyNameField"),
    companyNameInput: makeNodeComponent("companyNameInput"),
    businessHs: makeNodeComponent("businessHs"),
    sectorField: makeNodeComponent("sectorField"),
    select: makeNodeComponent("select"),
    formField: makeNodeComponent("formField"),
    select2: makeNodeComponent("select2"),
    detailsHs: makeNodeComponent("detailsHs"),
    billAmountField: makeNodeComponent("billAmountField"),
    billAmountInput: makeNodeComponent("billAmountInput"),
    messageField: makeNodeComponent("messageField"),
    messageInput: makeNodeComponent("messageInput"),
    button: makeNodeComponent("button"),
    footer: makeNodeComponent("footer"),
    section5: makeNodeComponent("section5"),
    brandLogo3: makeNodeComponent("brandLogo3"),
    section6: makeNodeComponent("section6"),
    h4: makeNodeComponent("h4"),
    whereToFindUs3: makeNodeComponent("whereToFindUs3"),
    connectWithUs4: makeNodeComponent("connectWithUs4"),
    getSolar3: makeNodeComponent("getSolar3"),
    // Metadata about props expected for PlasmicGetSolar
    internalVariantProps: PlasmicGetSolar__VariantProps,
    internalArgProps: PlasmicGetSolar__ArgProps,
    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicGetSolar;
/* prettier-ignore-end */
